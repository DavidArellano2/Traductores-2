{\rtf1\ansi\deff0\deftab720{\fonttbl{\f0\fmodern Consolas;}}
{\colortbl\red0\green128\blue0;\red0\green0\blue0;\red255\green0\blue0;\red0\green0\blue255;\red128\green0\blue128;\red0\green120\blue215;}
{\info{\comment Generated by the SynEdit RTF exporter}
{\title P1v7.rtf}}

\deflang1033\pard\plain\f0\fs26 \cf0 #include <iostream>
\par #include <string>
\par 
\par \cf1\b using\b0  \b namespace\b0  std\cf2\b ;
\par 
\par \b0\cf1 string cadenaEntrada \cf2\b =\b0\cf1  \cf3\b ""\cf2 ;
\par \b0\cf1 string cadenaPF \cf2\b =\b0\cf1  \cf3\b ""\cf2 ;
\par \cf1 char\b0  analisis\cf2\b ;
\par \b0\cf1 size_t indice \cf2\b =\b0\cf1  \cf4 0\cf2\b ;
\par 
\par \cf1 void\b0  coincidir\cf2\b (\cf1 char\cf2 );
\par 
\par \cf1 void\b0  expr\cf2\b ();
\par \cf1 void\b0  expr_\cf2\b ();
\par 
\par \cf1 void\b0  term\cf2\b ();
\par \cf1 void\b0  term_\cf2\b ();
\par 
\par \cf1 void\b0  factor\cf2\b ();
\par \cf1 void\b0  digito\cf2\b ();
\par 
\par \cf1 int\b0  main\cf2\b ()
\par \{
\par \b0\cf1     indice \cf2\b =\b0\cf1  \cf4 0\cf2\b ;
\par \b0\cf1     cout \cf2\b <<\b0\cf1  \cf3\b "Escriba una expresion: "\cf2 ;
\par \b0\cf1     cin \cf2\b >>\b0\cf1  cadenaEntrada\cf2\b ;
\par \b0\cf1     cadenaEntrada \cf2\b +=\b0\cf1  \cf3\b "!"\cf2 ;
\par \b0\cf1     expr\cf2\b ();
\par \b0\cf1     \b if\b0  \cf2\b (\b0\cf1 cadenaEntrada\cf2\b [\b0\cf1 indice\cf2\b ]\b0\cf1  \cf2\b !=\b0\cf1  '!'\cf2\b )
\par \b0\cf1     \cf2\b \{
\par \b0\cf1         cerr \cf2\b <<\b0\cf1  \cf3\b "Hay un error en la cadena"\b0\cf1  \cf2\b <<\b0\cf1  endl\cf2\b ;
\par \b0\cf1         exit\cf2\b (\b0\cf4 1\cf2\b );
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     
\par     \cf5\i // cout << "Cadena valida" << endl;
\par \i0\cf1     cout \cf2\b <<\b0\cf1  \cf3\b "Cadena postfijo: "\b0\cf1  \cf2\b <<\b0\cf1  cadenaPF \cf2\b <<\b0\cf1  endl\cf2\b ;
\par 
\par \b0\cf1     \b return\b0  \cf4 0\cf2\b ;
\par \}
\par 
\par \cf1 void\b0  coincidir\cf2\b (\cf1 char\b0  curr\cf2\b )
\par \{
\par \b0\cf1     \b if\b0  \cf2\b (\b0\cf1 analisis \cf2\b !=\b0\cf1  curr\cf2\b )
\par \b0\cf1     \cf2\b \{
\par \b0\cf1         cerr \cf2\b <<\b0\cf1  \cf3\b "Hay un error en '"\b0\cf1  \cf2\b <<\b0\cf1  curr \cf2\b <<\b0\cf1  \cf3\b "'"\b0\cf1  \cf2\b <<\b0\cf1  endl\cf2\b ;
\par \b0\cf1         exit\cf2\b (\b0\cf4 1\cf2\b );
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     indice\cf2\b ++;
\par \}
\par 
\par \cf1 void\b0  expr\cf2\b ()
\par \{
\par \b0\cf1     term\cf2\b ();
\par \b0\cf1     expr_\cf2\b ();
\par \}
\par 
\par \cf1 void\b0  expr_\cf2\b ()
\par \{
\par \b0\cf1     \b char\b0  pf\cf2\b ;
\par \b0\cf1     \b while\b0  \cf2\b (\cf1 true\cf2 )
\par \b0\cf1     \cf2\b \{
\par \b0\cf1         analisis \cf2\b =\b0\cf1  cadenaEntrada\cf2\b [\b0\cf1 indice\cf2\b ];
\par \b0\cf1         pf \cf2\b =\b0\cf1  analisis\cf2\b ;
\par \b0\cf1         \b switch\b0  \cf2\b (\b0\cf1 analisis\cf2\b )
\par \b0\cf1         \cf2\b \{
\par \b0\cf1         \b case\b0  '+'\cf2\b :
\par \b0\cf1             coincidir\cf2\b (\b0\cf1 '+'\cf2\b );
\par \b0\cf1             term\cf2\b ();
\par \b0\cf1             cadenaPF \cf2\b +=\b0\cf1  pf\cf2\b ;
\par \b0\cf1             \b continue\cf2 ;
\par 
\par \b0\cf1         \b case\b0  '-'\cf2\b :
\par \b0\cf1             coincidir\cf2\b (\b0\cf1 '-'\cf2\b );
\par \b0\cf1             term\cf2\b ();
\par \b0\cf1             cadenaPF \cf2\b +=\b0\cf1  pf\cf2\b ;
\par \b0\cf1             \b continue\cf2 ;
\par \b0\cf1         \b default\cf2 :
\par \b0\cf1             \b return\cf2 ;
\par \b0\cf1         \cf2\b \}
\par \b0\cf1     \cf2\b \}
\par \}
\par 
\par \cf1 void\b0  term\cf2\b ()
\par \{
\par \b0\cf1     factor\cf2\b ();
\par \b0\cf1     term_\cf2\b ();
\par \}
\par 
\par \cf1 void\b0  term_\cf2\b ()
\par \{
\par \b0\cf1     \b char\b0  pf\cf2\b ;
\par \b0\cf1     \b while\b0  \cf2\b (\cf1 true\cf2 )
\par \b0\cf1     \cf2\b \{
\par \b0\cf1         analisis \cf2\b =\b0\cf1  cadenaEntrada\cf2\b [\b0\cf1 indice\cf2\b ];
\par \b0\cf1         pf \cf2\b =\b0\cf1  analisis\cf2\b ;
\par \b0\cf1         \b switch\b0  \cf2\b (\b0\cf1 analisis\cf2\b )
\par \b0\cf1         \cf2\b \{
\par \b0\cf1         \b case\b0  '*'\cf2\b :
\par \b0\cf1             coincidir\cf2\b (\b0\cf1 '*'\cf2\b );
\par \b0\cf1             factor\cf2\b ();
\par \b0\cf1             cadenaPF \cf2\b +=\b0\cf1  pf\cf2\b ;
\par \b0\cf1             \b continue\cf2 ;
\par 
\par \b0\cf1         \b case\b0  '/'\cf2\b :
\par \b0\cf1             coincidir\cf2\b (\b0\cf1 '/'\cf2\b );
\par \b0\cf1             factor\cf2\b ();
\par \b0\cf1             cadenaPF \cf2\b +=\b0\cf1  pf\cf2\b ;
\par \b0\cf1             \b continue\cf2 ;
\par 
\par \b0\cf1         \b default\cf2 :
\par \b0\cf1             \b return\cf2 ;
\par \b0\cf1         \cf2\b \}
\par \b0\cf1     \cf2\b \}
\par \}
\par 
\par \cf1 void\b0  factor\cf2\b ()
\par \{
\par \b0\cf1     analisis \cf2\b =\b0\cf1  cadenaEntrada\cf2\b [\b0\cf1 indice\cf2\b ];
\par \b0\cf1     \cf5\i // char pf = analisis;
\par \i0\cf1     \b switch\b0  \cf2\b (\b0\cf1 analisis\cf2\b )
\par \b0\cf1     \cf2\b \{
\par \b0\cf1     \b case\b0  '('\cf2\b :
\par \b0\cf1         coincidir\cf2\b (\b0\cf1 '('\cf2\b );
\par \b0\cf1         \cf5\i // cadenaPF += '(';
\par \i0\cf1         expr\cf2\b ();
\par \b0\cf1         coincidir\cf2\b (\b0\cf1 ')'\cf2\b );
\par \b0\cf1         \cf5\i // cadenaPF += ')';
\par \i0\cf1         \b break\cf2 ;
\par \b0\cf1     \b default\cf2 :
\par \b0\cf1         digito\cf2\b ();
\par \b0\cf1         \cf5\i // cadenaPF += pf;
\par \i0\cf1         \b break\cf2 ;
\par \b0\cf1     \cf2\b \}
\par \}
\par 
\par \cf1 void\b0  digito\cf2\b ()
\par \{
\par \b0\cf1     analisis \cf2\b =\b0\cf1  cadenaEntrada\cf2\b [\b0\cf1 indice\cf2\b ];
\par \b0\cf1     \b char\b0  pf \cf2\b =\b0\cf1  analisis\cf2\b ;
\par \b0\cf1     \b if\b0  \cf2\b (\b0\cf1 isdigit\cf2\b (\b0\cf1 analisis\cf2\b ))
\par \b0\cf1     \cf2\b \{
\par \b0\cf1         coincidir\cf2\b (\b0\cf1 analisis\cf2\b );
\par \b0\cf1         cadenaPF \cf2\b +=\b0\cf1  pf\cf2\b ;
\par \b0\cf1         \b return\cf2 ;
\par \b0\cf1     \cf2\b \}
\par \b0\cf1     cerr \cf2\b <<\b0\cf1  \cf3\b "Se introdujo un digito invalido"\b0\cf1  \cf2\b <<\b0\cf1  endl\cf2\b ;
\par \b0\cf1     exit\cf2\b (\b0\cf4 1\cf2\b );
\par \}
\par }